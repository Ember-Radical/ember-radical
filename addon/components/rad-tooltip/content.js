import Component from '@ember/component'
import hbs from 'htmlbars-inline-precompile'

/**
 * CoreTooltip subcomponent for inner content. Requires properties `hidden` and
 * `aria-describedby` yielded by `rad-tooltip`.
 *
 * Properties | Default | Description
 * --- | --- | ---
 * aria-describedby | '' | REQUIRED Used to bind id to tooltip title `aria-describedby` attr
 * hidden | true | Boolean that toggles `aria-hidden` attribute to handle show/hide of content
 *
 * @class Component.RadTooltip.Content
 * @constructor
 * @extends Ember.Component
 */
export default Component.extend({
  // Passed Properties
  // ---------------------------------------------------------------------------
  /**
   * Unique string generated by parent `rad-tooltip` Used for 508 attrs. Is
   * bound to id here and `aria-describedby` on the tooltip title. Is bound
   * to id in `init` call.
   * @property aria-describedby
   * @type {string}
   * @default ''
   */
  'aria-describedby': '',
  /**
   * Display status of the tooltip. Is bound to the properties `aria-hidden` for
   * better usability and to handle css of show/hide. Is also bound to html5
   * `hidden` attribute.
   * @property hidden
   * @type {Boolean}
   * @default true
   */
  hidden: true,

  // Ember Props
  // ---------------------------------------------------------------------------

  /**
   * Auto-binds `data-test` attributes
   *
   * @property attributeBindings
   * @type {Array}
   */
  attributeBindings: ['data-test'],
  /**
   * Handle binding standard core class names: `jsTooltipTarget` && `tooltip-content`
   * `jsTooltipTarget` is being used for css positioning. Do we want to pass that
   * directly instead? probably.
   * @property classNames
   * @type {Array}
   */
  classNames: ['tooltip-content-wrapper'],
  /**
   * `div` DOM element
   * @property tagName
   * @type {string}
   */
  tagName: 'div',

  // Hooks
  // ---------------------------------------------------------------------------

  /**
   * Log warning if `aria-describedby` is not passed in.
   * @event init
   * @return {undefined}
   */
  init() {
    this._super(...arguments)
    if (!this['aria-describedby']) {
      return console.warn('Tooltip requires aria-describedby')
    }
  },
  /**
   * On render validate that the tooltip content is not overflowing the window.
   * If it is, chop off the overflow.
   *
   * If you need to override this event, be sure to call `this._super();`
   * @event didRender
   * @return {undefined}
   */
  didRender() {
    // If the content is hidden, do less
    if (this.hidden) {
      return
    }

    const { right, width } = document
      .getElementById(this['aria-describedby'])
      .getBoundingClientRect()
    const windowWidth = window.innerWidth

    // If the tooltip's right bound is outside the window, it's overflowing, no bueno
    if (right > windowWidth) {
      // Set the width of the magical width wrapper to the current width minuse how much the tooltip is overflowing
      this.element.style.width = `${width - (right - windowWidth)}px`
    }
  },

  // Layout
  // ---------------------------------------------------------------------------
  layout: hbs`
    <div class="tooltip-content" aria-hidden="{{hidden}}" role="tooltip" id="{{aria-describedby}}">
      {{yield}}
      <div class="tip"></div>
    </div>`,
})
